<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git Cheat Sheet</title>
      <link href="2017/09/05/Git%20Cheat%20Sheet/"/>
      <url>2017/09/05/Git%20Cheat%20Sheet/</url>
      
        <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p><code>GitHub Desktop</code> 提供了包含图形界面的桌面客户端，通过客户端可以完成大部分常用的仓库操作，同时可以自动更新Git的命令行版本，以适应新的场景。</p></blockquote><p>Git 全平台版</p><p><a href="https://git-scm.com/">https://git-scm.com</a></p><p>GitHub Desktop</p><p><a href="https://desktop.github.com/">https://desktop.github.com</a></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><blockquote><p>对所有本地仓库的用户信息进行配置</p></blockquote><p>对你的 commit 操作设置关联的用户名</p><pre><code class="shell">git config --global user.name &quot;[name]&quot;</code></pre><p>对你的 commit 操作设置关联的邮箱地址</p><pre><code class="shell">git config --global user.email &quot;[email address]&quot;</code></pre><p>更新默认编辑器</p><pre><code class="shell">git config --global core.editor &quot;vim&quot;</code></pre><p><strong>创建 SSH 连接</strong></p><p>默认全局</p><pre><code class="shell">ssh-keygen -t rsa -C &quot;[your github email]&quot;</code></pre><p>指定别名</p><pre><code class="shell">ssh-keygen -t rsa -C &quot;[your github email]&quot; -f ~/.ssh/github-rsa</code></pre><p><strong>更新仓库地址为 SSH 连接</strong></p><p>获取远程连接信息</p><pre><code class="shell">git remote -v</code></pre><p>更新远程 url </p><pre><code class="shell">git remote set-url [remote] git@github.com:[your repository].git</code></pre><p><strong>remote 的默认别名是 origin</strong></p><p>检查是否连接到 GitHub </p><pre><code class="shell">ssh -T git@github.com</code></pre><p>增加代理</p><pre><code class="shell">git config --global http.proxy &#39;socks5://127.0.0.1:1080&#39;git config --global https.proxy &#39;socks5://127.0.0.1:1080&#39;</code></pre><p>根据 .gitignore 更新文件缓存</p><pre><code class="shell">git rm -r --cached . &amp;&amp; git add . &amp;&amp; git commit -m &#39;update .gitignore&#39;</code></pre><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>创建一个本地的仓库，并设置名字</p><pre><code class="shell">git init [project-name]</code></pre><p>下载一个项目以及它所有的版本历ß史</p><pre><code class="shell">git clone [url]</code></pre><h2 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h2><blockquote><p>检查已有的编辑并执行 commit 操作</p></blockquote><p>列出所有新建或者更改的文件，这些文件需要被 commit</p><pre><code class="shell">git status</code></pre><p>展示那些没有暂存文件的差异</p><pre><code class="shell">git diff</code></pre><p>将文件进行快照处理用于版本控制</p><pre><code class="shell">git add [file]</code></pre><p>展示暂存文件与最新版本之间的不同</p><pre><code class="shell">git diff --staged</code></pre><p>将文件移除暂存区，但是保留其内容</p><pre><code class="shell">git reset [file]</code></pre><p>将文件快照永久地记录在版本历史中</p><pre><code class="shell">git commit -m &quot;[descriptive message]&quot;</code></pre><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><blockquote><p>分支的常见操作</p></blockquote><p>列出当前仓库中所有的本地分支</p><pre><code class="shell">git branch</code></pre><p>建立一个新分支</p><pre><code class="shell">git branch [branch-name]</code></pre><p>切换到一个特定的分支上并更新工作目录</p><pre><code class="shell">git checkout [branch-name]</code></pre><p>从当前分支建立一个新的子分支并切换到子分支</p><pre><code class="shell">git checkout -b [branch-name]</code></pre><p>合并特定分支的历史到当前分支</p><pre><code class="shell">git merge [branch-name]</code></pre><p>删除特定的分支</p><pre><code class="shell">git branch -D [branch-name]</code></pre><p>删除所有含关键字的分支</p><pre><code class="shell">git branch | grep &#39;[key]&#39; | xargs git branch -D</code></pre><h2 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h2><blockquote><p>重定位并移除版本文件</p></blockquote><p>从工作目录中删除文件并暂存此删除</p><pre><code class="shell">git rm [file]</code></pre><p>从版本控制中移除文件，并在本地保存文件</p><pre><code class="shell">git rm --cached [file]</code></pre><p>改变文件名并准备 commit</p><pre><code class="shell">git mv [file-original] [file-renamed]</code></pre><h2 id="忽略"><a href="#忽略" class="headerlink" title="忽略"></a>忽略</h2><blockquote><p>不包含临时文件和路径</p></blockquote><p>文本文件 .gitignore 可以防止一些特定的文件进入到版本控制中</p><pre><code class="shell">*.logbuild/temp-*</code></pre><p>列出所有项目中忽略的文件</p><pre><code class="shell">git ls-files --others --ignored --exclude-standard参考网址```shellhttps://github.com/github/gitignorehttps://www.gitignore.io</code></pre><h2 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h2><blockquote><p>暂存一些未完成的更改</p></blockquote><p>临时存储所有修改的已跟踪文件</p><pre><code class="shell">git stash</code></pre><p>重新存储所有最近被stash的文件</p><pre><code class="shell">git stash pop</code></pre><p>列出所有被stash的更改</p><pre><code class="shell">git stash list</code></pre><p>放弃所有最近stash的更改</p><pre><code class="shell">git stash drop</code></pre><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><blockquote><p>浏览并检查项目文件的发展</p></blockquote><p>列出当前分支的版本历史</p><pre><code class="shell">git log</code></pre><p>列出文件的版本历史，包括重命名</p><pre><code class="shell">git log --follow [file]</code></pre><p>展示两个不同分支之间的差异</p><pre><code class="shell">git diff [first-branch]...[second-branch]</code></pre><p>输出元数据以及特定commit的内容变化</p><pre><code class="shell">git show [commit]</code></pre><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><blockquote><p>擦除错误并更改历史</p></blockquote><p>撤销所有 [commit] 后的的 commit ，在本地保存更改</p><pre><code class="shell">git reset [commit]</code></pre><p>还原本地所有未 commit 的修改</p><pre><code class="shell">git checkout .</code></pre><p>放弃所有更改并回到某个特定的 commit ，不保留任何历史文件</p><pre><code class="shell">git reset --hard [commit]</code></pre><p>放弃所有更改并回到某个特定的 commit ，保留历史文件</p><pre><code class="shell">git reset --soft [commit]</code></pre><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><blockquote><p>注册一个远程的链接，交换仓库的版本历史</p></blockquote><p>下载远程仓库的所有历史</p><pre><code class="shell">git fetch [remote]</code></pre><p>合并远程分支到当前本地分支</p><pre><code class="shell">git merge [remote]/[branch]</code></pre><p>上传所有本地分支commit到GitHub上</p><pre><code class="shell">git push [remote] [branch]</code></pre><p>下载书签历史并合并更改</p><pre><code class="shell">git pull</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名解析配置说明</title>
      <link href="2017/08/31/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/"/>
      <url>2017/08/31/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="记录类型"><a href="#记录类型" class="headerlink" title="记录类型"></a>记录类型</h1><p>域名解析类型主要有以下几项</p><h2 id="A"><a href="#A" class="headerlink" title="A"></a>A</h2><p>将域名指向一个IPv4地址（例如：10.10.10.10），需要增加A记录</p><h2 id="CNAME"><a href="#CNAME" class="headerlink" title="CNAME"></a>CNAME</h2><p>如果将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录</p><h2 id="MX"><a href="#MX" class="headerlink" title="MX"></a>MX</h2><p>建立电子邮箱服务，将指向邮件服务器地址，需要设置MX记录</p><h2 id="NS记录"><a href="#NS记录" class="headerlink" title="NS记录"></a>NS记录</h2><p>域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置NS记录</p><h2 id="TXT"><a href="#TXT" class="headerlink" title="TXT"></a>TXT</h2><p>可任意填写（可为空），通常用做SPF记录（反垃圾邮件）使用</p><h2 id="AAAA"><a href="#AAAA" class="headerlink" title="AAAA"></a>AAAA</h2><p>将主机名（或域名）指向一个IPv6地址（例如：ff03:0:0:0:0:0:0:c1），需要添加AAAA记录</p><h2 id="SRV"><a href="#SRV" class="headerlink" title="SRV"></a>SRV</h2><p>记录了哪台计算机提供了哪个服务。格式为：服务的名字.协议的类型（例如：_example-server._tcp）</p><h2 id="显性URL"><a href="#显性URL" class="headerlink" title="显性URL"></a>显性URL</h2><p>将域名指向一个http(s)协议地址，访问域名时，自动跳转至目标地址</p><p>例如：将 <a href="http://www.net.cn/">www.net.cn</a> 显性转发到 <a href="http://www.hichina.com/">www.hichina.com</a> 后，访问 <a href="http://www.net.cn/">www.net.cn</a> 时，地址栏显示的地址为：<a href="http://www.hichina.com/">www.hichina.com</a></p><h2 id="隐性URL"><a href="#隐性URL" class="headerlink" title="隐性URL"></a>隐性URL</h2><p>与显性URL类似，但隐性转发会隐藏真实的目标地址</p><p>例如：将 <a href="http://www.net.cn/">www.net.cn</a> 隐性转发到 <a href="http://www.hichina.com/">www.hichina.com</a> 后，访问 <a href="http://www.net.cn/">www.net.cn</a> 时，地址栏显示的地址仍然为：<a href="http://www.net.cn/">www.net.cn</a></p><p>隐性URL记录对网站排名不利，如非必要，建议设置成显示URL</p><h1 id="主机记录"><a href="#主机记录" class="headerlink" title="主机记录"></a>主机记录</h1><p>主机记录就是域名前缀，常见用法有以下几项</p><h2 id="www"><a href="#www" class="headerlink" title="www"></a>www</h2><p>将域名解析为<a href="http://www.example.com,填写www/">www.example.com，填写www</a></p><h2 id=""><a href="#" class="headerlink" title="@ "></a>@ </h2><p>将域名解析为example.com（不带www），填写@或者不填写</p><h2 id="mail"><a href="#mail" class="headerlink" title="mail"></a>mail</h2><p>将域名解析为mail.example.com，通常用于解析邮箱服务器</p><h2 id="-1"><a href="#-1" class="headerlink" title="*"></a>*</h2><p>泛解析，所有子域名均被解析到统一地址（除单独设置的子域名解析）</p><h2 id="二级域名"><a href="#二级域名" class="headerlink" title="二级域名"></a>二级域名</h2><p>mail.example.com 或 blog.example.com，填写 mail 或 blog</p><h2 id="手机网站"><a href="#手机网站" class="headerlink" title="手机网站"></a>手机网站</h2><p>m.example.com，填写m</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="A记录与CNAME记录"><a href="#A记录与CNAME记录" class="headerlink" title="A记录与CNAME记录"></a>A记录与CNAME记录</h2><p>A记录是把一个域名解析到一个IP地址，而CNAME记录是把域名解析到另外一个域名，而这个域名最终会指向一个A记录，在功能实现在上A记录与CNAME记录没有区别</p><p>CNAME记录在做IP地址变更时要比A记录方便。CNAME记录允许将多个名字映射到同一台计算机，当有多个域名需要指向同一服务器IP，此时可以将一个域名做A记录指向服务器IP，然后将其他的域名设置为CNAME记录，映射到A记录的域名上。</p><p>这样处理的好处是，当服务器IP地址变更时，只需要更改A记录的那个域名到新IP上，其它做别名的域名会自动更改到新的IP地址上，而不必对每个域名做更改</p><h2 id="A记录与AAAA记录"><a href="#A记录与AAAA记录" class="headerlink" title="A记录与AAAA记录"></a>A记录与AAAA记录</h2><p>二者都是指向一个IP地址，但对应的IP版本不同。</p><p>A记录指向IPv4地址，AAAA记录指向IPv6地址。</p><p>AAAA记录是A记录的升级版本。</p><h2 id="IPv4与IPv6"><a href="#IPv4与IPv6" class="headerlink" title="IPv4与IPv6"></a>IPv4与IPv6</h2><p>IPv4，是互联网协议（Internet Protocol，IP）的第四版，也是第一个被广泛使用的版本，是构成现今互联网技术的基础协议。</p><p>IPv4 的下一个版本就是IPv6，在将来将取代，目前被广泛使用的IPv4。</p><p>IPv4中规定IP地址长度为32位（按TCP/IP参考模型划分) ，即有2^32-1个地址。</p><p>IPv6的提出最早是为了解决，随着互联网的迅速发展IPv4地址空间将被耗尽的问题。</p><p>为了扩大地址空间，IPv6将IP地址的长度由32位增加到了128位。</p><p>在IPv6的设计过程中除了一劳永逸地解决了地址短缺问题以外，还解决了IPv4中的其它问题，如：端到端IP连接、服务质量（QoS）、安全性、多播、移动性、即插即用等。</p><h2 id="TTL值"><a href="#TTL值" class="headerlink" title="TTL值"></a>TTL值</h2><p>TTL－生存时间(Time-To-Live)，就是一条域名解析记录在 DNS 服务器中的存留时间。</p><p>当各地的 DNS 服务器接受到解析请求时，就会向域名指定的 NS 服务器发出解析请求从而获得解析记录；在获得这个记录之后，记录会在 DNS 服务器中保存一段时间，这段时间内如果再接到这个域名的解析请求，DNS 服务器将不再向 NS 服务器发出请求，而是直接返回刚才获得的记录；而这个记录在 DNS 服务器上保留的时间，就是 TTL 值。</p><p>TTL的时间长度单位是秒，一般为3600秒。比如：在访问 ilovelan.com 时，如果在DNS服务器的缓存中没有该记录，就会向某个NS服务器发出请求，获得该记录后，该记录会在DNS服务器上保存TTL的时间长度，在TTL有效期内访问 ilovelan.com ，DNS服务器会直接缓存中返回刚才的记录。</p><p>关于TTL值应用说明</p><p><strong>1、增大 TTL 值，以节约域名解析时间，给网站访问加速</strong></p><p>一般情况下，域名的各种记录是极少更改的，很可能几个月、几年内都不会有什么变化。我们完全可以增大域名记录的 TTL 值让记录在各地 DNS 服务器中缓存的时间加长，这样在更长的一段时间内，我们访问这个网站时，本地 ISP 的 DNS 服务器就不需要向域名的 NS 服务器发出解析请求，而直接从缓存中返回域名解析记录。</p><p><strong>2、减小 TTL 值，以减少更换空间时的不可访问时间</strong></p><p>更换空间 99.9% 会有 DNS 记录更改的问题，因为缓存的问题，新的域名记录在有的地方可能生效了，但在有的地方可能等上一两天甚至更久才生效。结果就是有的人可能访问到了新服务器，有的人访问到了旧服务器。仅仅是访问的话，这也不是什么大问题，但如果涉及到了邮件发送，这个就有点麻烦了，说不定哪封重要信件就被发送到了那已经停掉的旧服务器上。</p><p>为了尽可能的减小这个各地的解析时间差，合理的做法是：</p><p>1）先查看域名当前的 TTL 值，我们假定是 1 天。</p><p>2）修改 TTL 值为可设定的最小值，可能的话，建议为 1 分钟，就是 60。</p><p>3）等待一天，保证各地的 DNS 服务器缓存都过期并更新了记录。</p><p>4）设置修改新记录，这个时候各地的 DNS 就能以最快的速度更新到新的记录。</p><p>5）确认各地的 DNS 已经更新完成后，把 TTL 值设置成您想要的值，TTL=60 还是太小了点。</p><h2 id="子域名级别"><a href="#子域名级别" class="headerlink" title="子域名级别"></a>子域名级别</h2><p>定义 .com、.net、.cn、.org 等为顶级域。</p><p>定义 example.com、example.net、example.cn 等为一级域名。</p><p>定义 <a href="http://www.example.com、news.example.net、www.example.cn/">www.example.com、news.example.net、www.example.cn</a> 等为二级域名，即一级域名的子域名，该子域名为二级子域名。</p><p>以此类推，子域名级别定义如下：</p><p>三级子域名为：a.<a href="http://www.example.com/">www.example.com</a> 或者 a.<a href="http://www.example.net/">www.example.net</a></p><p>四级子域名为：b.a.<a href="http://www.example.com/">www.example.com</a> 或者 b.a.<a href="http://www.example.net/">www.example.net</a></p><p>五级子域名为：c.b.a.<a href="http://www.example.com/">www.example.com</a> 或者 c.b.a.<a href="http://www.example.net/">www.example.net</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> HTTP </tag>
            
            <tag> DNS </tag>
            
            <tag> TTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Migrate from HTTP to HTTPS</title>
      <link href="2017/08/15/How%20to%20Migrate%20from%20HTTP%20to%20HTTPS/"/>
      <url>2017/08/15/How%20to%20Migrate%20from%20HTTP%20to%20HTTPS/</url>
      
        <content type="html"><![CDATA[<h1 id="获取证书"><a href="#获取证书" class="headerlink" title="获取证书"></a>获取证书</h1><p>升级HTTPS的首要条件就是要获得CA证书</p><p>CA证书可以跟证书机构直接购买，或者从代理商处购买</p><p>当然也可以自己生成证书，然而并不在浏览器的信任列表</p><p>国内部分的云服务厂商在购买其产品后可以申请一定数量的免费证书。</p><p>比如如阿里云的每个帐号可以免费申请20个由 <code>Symantec</code> 颁发的 <code>DV SSL</code> 证书</p><p>部署证书的一般步骤如下：</p><ol><li>购买证书</li><li>身份认证</li><li>安装证书</li></ol><p>购买证书类型不同，身份认证流程也不同</p><p>证书收费策略根据认证级别和适用范围有所不同</p><h2 id="证书分类"><a href="#证书分类" class="headerlink" title="证书分类"></a>证书分类</h2><h3 id="按认证级别分类"><a href="#按认证级别分类" class="headerlink" title="按认证级别分类"></a>按认证级别分类</h3><p><strong>域名认证（DV SSL）</strong></p><p>Domain Validation</p><p>申请流程简单，认证级别最低，可以验证申请人对域名的所有权</p><p>客户端验证成功后，一般会在浏览器地址栏显示一把锁</p><p><strong>组织认证（OV SSL）</strong></p><p>Organization Validation</p><p>申请流程复杂，认证级别较高，可以验证域名及组织的合法性</p><p><code>OV SSL</code> 提供加密功能，对申请者做严格的身份审核验证，提供可信身份证明</p><p><code>增强型OV SSL</code>(支持ECC椭圆曲线算法)，提供站点加密功能，需要核验组织注册信息，证书中显示组织名称</p><p><strong>扩展认证（EV SSL）</strong></p><p>Extended Validation</p><p>申请时申请人必须通过严谨的扩展验证流程，认证级别最高。</p><p>客户端验证成功后，会浏览器地址栏会显示公司名</p><p><code>EV SSL</code>提供加密功能，对申请者做最严格的身份审核验证，提供最高度可信身份证明，提供浏览器绿色地址栏</p><p><code>增强型EV SSL</code>(支持ECC椭圆曲线算法)，提供站点加密功能，浏览器绿色地址栏显示组织信息强化信任</p><h3 id="按适用范围分类"><a href="#按适用范围分类" class="headerlink" title="按适用范围分类"></a>按适用范围分类</h3><p><strong>单域名SSL</strong></p><p>证书只能用于一个网站</p><p>example.com的证书将不能用于<a href="http://www.example.com/">www.example.com</a></p><p><strong>多域名SSL</strong></p><p>证书可以用于多个网站</p><p>用于<a href="http://www.example.com证书也可用于www.example.cn、www.example2.com/">www.example.com证书也可用于www.example.cn、www.example2.com</a> 等</p><p><strong>通配符SSL</strong></p><p>证书可以用于某个及其所有一级子域名</p><p>*.example.com的证书，也可用于<a href="http://www.example.com、cdn.example.com等/">www.example.com、cdn.example.com等</a></p><h1 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h1><p>CA厂商会提供证书的安装教程，所使用的Web服务器不同，安装的证书方式也不一样</p><p>以下是个人在安装DV SSL证书的一些做法，略作参考</p><h2 id="Linux-Nginx"><a href="#Linux-Nginx" class="headerlink" title="Linux + Nginx"></a>Linux + Nginx</h2><ol><li>修改配置文件一般是通过修改全局配置文件实现，全局配置文件通常位于 <code>/ect/nginx/nginx.conf</code></li><li>如果服务器允许多个站点，推荐通过修改站点的配置来实现，站点的配置文件一般位于目录 <code>/etc/nginx/conf.d/</code></li><li>打开自定义的配置文件 <code>vi sever.conf</code>，在 <code>server</code> 节点，监听 <code>443</code> 端口</li></ol><pre><code>    server &#123;            listen 443 ssl;            server_name example.com;            ssl on;            ssl_certificate cert/214181760910328.pem;            ssl_certificate_key cert/214181760910328.key;            ssl_session_timeout 5m;            keepalive_timeout 90;            ssl_prefer_server_ciphers on;    &#125;</code></pre><p>把http的请求强制转到https</p><pre><code>server &#123;    listen 80;    server_name example.com www.example.com;    rewrite ^(.*) https://example.com$1 permanent;&#125;</code></pre><p>然后重启nginx服务</p><pre><code>nginx -s reload</code></pre><h2 id="eclipse-tomcat"><a href="#eclipse-tomcat" class="headerlink" title="eclipse + tomcat"></a>eclipse + tomcat</h2><p>1.打开服务器的 <code>server.xml</code> 文件</p><pre><code>&lt;Connector port=&quot;443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;    maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;    keystoreFile=&quot;C:\i-cert\214181760910328.pfx&quot;    keystoreType=&quot;PKCS12&quot;    keystorePass=&quot;214181760910328&quot;    clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;</code></pre><p>2.在服务器 <code>web.xml</code> 文件结尾添加</p><p>把http的请求强制转到https</p><pre><code>&lt;security-constraint&gt;    &lt;web-resource-collection &gt;        &lt;web-resource-name&gt;SSL&lt;/web-resource-name&gt;        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;    &lt;/web-resource-collection&gt;                                 &lt;user-data-constraint&gt;        &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;    &lt;/user-data-constraint&gt;&lt;/security-constraint&gt;</code></pre><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="升级静态资源"><a href="#升级静态资源" class="headerlink" title="升级静态资源"></a>升级静态资源</h2><ol><li>想要全站点都是绿色小锁头，必须确保所有的站点资源（图片、js、css）都是https链接</li><li>如果站点中存在非https的链接引用<ol><li>Chrome浏览器https变灰色</li><li>Android5.0 API默认仅支持一种模式，http资源将不会被加载，需要自行设置WebSetting属性为<code>WebSettings.MIXED_CONTENT_ALWAYS_ALLOW</code></li></ol></li></ol><h2 id="提高安全措施"><a href="#提高安全措施" class="headerlink" title="提高安全措施"></a>提高安全措施</h2><h3 id="HTTP-Strict-Transport-Security-HSTS"><a href="#HTTP-Strict-Transport-Security-HSTS" class="headerlink" title="HTTP Strict Transport Security (HSTS)"></a>HTTP Strict Transport Security (HSTS)</h3><p>访问网站时，用户很少直接在地址栏输入<code>https://</code>，总是通过点击链接，或者301重定向，从HTTP页面进入HTTPS页面，攻击者完全可以在用户发出HTTP请求时，劫持并篡改该请求。</p><p>另一种情况是恶意网站使用自签名证书，冒充另一个网站，这时浏览器会给出警告，但是许多用户会忽略警告继续访问</p><p>“HTTP严格传输安全”（HSTS）的作用，就是强制浏览器只能发出HTTPS请求，并阻止用户接受不安全的证书<br>它在网站的响应头里面，加入一个强制性声明。</p><p>以下例子摘自<a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security">Wiki</a></p><pre><code>Strict-Transport-Security: max-age=31536000; includeSubDomains</code></pre><p>上面这段头信息有两个作用</p><ol><li>在接下来的一年（即31536000秒）中，浏览器只要向example.com或其子域名发送HTTP请求时，必须采用HTTPS来发起连接。用户点击超链接或在地址栏输入 <code>http://www.example.com</code>，浏览器应当自动将http转写成https，然后直接向 <code>https://www.example.com</code> 发送请求。</li><li>在接下来的一年中，如果example.com服务器发送的证书无效，用户不能忽略浏览器警告，将无法继续访问该网站。</li></ol><p><code>HSTS</code> 很大程度上解决了<code>SSL</code> 剥离攻击</p><p>只要浏览器曾经与服务器建立过一次安全连接，即使链接被换成了HTTP，之后浏览器会强制使用HTTPS<br>该方法的主要不足是，用户首次访问网站发出HTTP请求时，是不受HSTS保护的</p><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>另一个需要注意的地方是，确保浏览器只在使用 HTTPS 时，才发送Cookie</p><p>网站响应头里面，Set-Cookie字段加上Secure标志即可。</p><pre><code>    Set-Cookie: value[; expires=date][; domain=domain][; path=path][; secure]</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTPS </tag>
            
            <tag> SSL </tag>
            
            <tag> TSL </tag>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTPS相关名词简介</title>
      <link href="2017/08/14/HTTPS%E7%9B%B8%E5%85%B3%E5%90%8D%E8%AF%8D%E7%AE%80%E4%BB%8B/"/>
      <url>2017/08/14/HTTPS%E7%9B%B8%E5%85%B3%E5%90%8D%E8%AF%8D%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><p>HTTPS = HTTP + SSL，是 HTTP 基于 SSL 协议的网站加密传输协议，网站安装 SSL 证书后，使用 HTTPS 加密协议访问，可激活客户端浏览器到网站服务器之间的”SSL 加密通道”(SSL 协议)，实现高强度双向加密传输，以保护传输数据的隐私性与完整性。</p><h1 id="SSL"><a href="#SSL" class="headerlink" title="SSL"></a>SSL</h1><p>SSL（Secure Sockets Layer）即安全套接层，利用数据加密 (Encryption) 技术，可确保数据在网络上传输过程中不会被截取。SSL 协议位于 TCP/IP 协议与各种应用层协议之间，为数据通讯提供安全支持。</p><h1 id="SSL-证书"><a href="#SSL-证书" class="headerlink" title="SSL 证书"></a>SSL 证书</h1><p>SSL 证书就是遵守 SSL 协议的服务器数字证书，由受信任的数字证书颁发机构CA颁发，具有服务器身份验证和数据传输加密等功能。</p><h1 id="CA"><a href="#CA" class="headerlink" title="CA"></a>CA</h1><p>数字证书授权机构 （CA，Certificate Authority） 是负责发放和管理数字证书的权威机构。</p><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><p>RSA 公钥加密算法是 1977 年由 Ron Rivest、Adi Shamir、Leonard Adleman 一起提出的，它是第一个能同时用于加密和数字签名的算法，从提出到现今经历了各种攻击的考验，能够抵抗到目前为止已知的绝大多数密码攻击，已被 ISO 推荐为公钥数据加密标准。</p><h1 id="ECC"><a href="#ECC" class="headerlink" title="ECC"></a>ECC</h1><p>ECC（Elliptic Curves Cryptography，椭圆曲线加密算法）也是一种公钥加密算法，与主流的 RSA 算法相比，ECC 算法可以使用较短的密钥达到相同的安全程度，其安全性更高、处理速度更快。</p><h1 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h1><p>CDN（Content Delivery Network，内容分发网络）距用户仅有”一跳”(Single Hop)之遥，依靠部署在各地的边缘服务器，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CA </tag>
            
            <tag> CDN </tag>
            
            <tag> ECC </tag>
            
            <tag> HTTPS </tag>
            
            <tag> RSA </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown代码风格</title>
      <link href="2017/08/06/Markdown%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/"/>
      <url>2017/08/06/Markdown%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题</code></pre><h1 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h1><table><thead><tr><th>语法</th><th>效果</th></tr></thead><tbody><tr><td><code>_斜体_</code></td><td><em>斜体</em></td></tr><tr><td><code>**粗体**</code></td><td><strong>粗体</strong></td></tr><tr><td><code>~~删除线~~</code></td><td><del>删除线</del></td></tr><tr><td><code>**_斜粗体_**</code></td><td><strong><em>斜粗体</em></strong></td></tr><tr><td><code>~~**_斜粗体删除线_**~~</code></td><td><del><strong><em>斜粗体删除线</em></strong></del></td></tr></tbody></table><p>换行</p><pre><code>---</code></pre><hr><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code>``` java    public class HelloWorld &#123;        public static void main(String[] args) &#123;            System.out.println(&quot;Hello World!&quot;);        &#125;    &#125;```</code></pre><pre><code class="java">    public class HelloWorld &#123;        public static void main(String[] args) &#123;            System.out.println(&quot;Hello World!&quot;);        &#125;    &#125;</code></pre><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><pre><code>[text](url &quot;title&quot;)[Link To Google](https://www.google.com &quot;Google&quot;)</code></pre><p><a href="https://www.google.com/" title="Google">Link To Google</a></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><pre><code>![Alt Text](image url &quot;title&quot;)图片增加链接[![Alt Text](image url &quot;title&quot;)](url)[![Build Status](https://secure.travis-ci.com/itjun/i-blog.png)](https://travis-ci.com/itjun/i-blog)</code></pre><p><a href="https://travis-ci.com/itjun/i-blog"><img src="https://secure.travis-ci.com/itjun/i-blog.png" alt="Build Status"></a></p><h1 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h1><pre><code>[标题](#标题)  [文本](#文本)[代码](#代码)[链接](#链接)[图片](#图片)[列表](#列表)  </code></pre><p>转到 <a href="#%E6%A0%87%E9%A2%98">标题</a><br>转到 <a href="#%E6%96%87%E6%9C%AC">文本</a><br>转到 <a href="#%E4%BB%A3%E7%A0%81">代码</a><br>转到 <a href="#%E9%93%BE%E6%8E%A5">链接</a><br>转到 <a href="#%E5%9B%BE%E7%89%87">图片</a><br>转到 <a href="#%E5%88%97%E8%A1%A8">列表</a>  </p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>有序列表</p><pre><code>1. Item 12. Item 23. Item 3    1. Item 3a    1. Item 3b</code></pre><ol><li>Item 1</li><li>Item 2</li><li>Item 3<ol><li>Item 3a</li><li>Item 3b</li></ol></li></ol><hr><p>无序列表</p><pre><code>- Item 1- Item 2    - Item 2a    - Item 2b</code></pre><ul><li>Item 1</li><li>Item 2<ul><li>Item 2a</li><li>Item 2b</li></ul></li></ul><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>常用</p><pre><code>&gt; 最美的不是下雨天  &gt; 是曾与你躲过雨的屋檐</code></pre><blockquote><p>最美的不是下雨天<br>是曾与你躲过雨的屋檐</p></blockquote><hr><p>嵌套</p><pre><code>&gt; 张老三，我问你，&gt; 你的家乡在哪里？&gt;&gt; 我的家，在山西，&gt;&gt; 过河还有三百里。&gt;&gt;&gt; 我问你，在家里，&gt;&gt;&gt; 种田还是做生意？&gt;&gt;&gt;&gt; 拿锄头，耕田地，&gt;&gt;&gt;&gt; 种的高梁和小米。</code></pre><blockquote><p>张老三，我问你，<br>你的家乡在哪里？</p></blockquote><blockquote><blockquote><p>我的家，在山西，<br>过河还有三百里。</p></blockquote></blockquote><blockquote><blockquote><blockquote><p>我问你，在家里，<br>种田还是做生意？</p></blockquote></blockquote></blockquote><blockquote><blockquote><blockquote><blockquote><p>拿锄头，耕田地，<br>种的高梁和小米。</p></blockquote></blockquote></blockquote></blockquote><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><pre><code>First Header | Second Header | Third Header:----------- | :-----------: | -----------:Content from cell 1 | Content from cell 2 | Content from cell 3Content in the first column | Content in the second column | Content in the third column</code></pre><table><thead><tr><th align="left">First Header</th><th align="center">Second Header</th><th align="right">Third Header</th></tr></thead><tbody><tr><td align="left">Content from cell 1</td><td align="center">Content from cell 2</td><td align="right">Content from cell 3</td></tr><tr><td align="left">Content in the first column</td><td align="center">Content in the second column</td><td align="right">Content in the third column</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL连接数优化</title>
      <link href="2017/08/03/MySQL%E8%BF%9E%E6%8E%A5%E6%95%B0%E4%BC%98%E5%8C%96/"/>
      <url>2017/08/03/MySQL%E8%BF%9E%E6%8E%A5%E6%95%B0%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>使用Tomcat监听器执行定时（每0.5秒）扫描任务表的时，发现测试数据库的连接数每5分钟左右提示”Too many connections”（连接数过多）</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>数据库类型 MySQL 5.6<br>CPU 3核<br>数据库内存 240MB<br>最大IOPS 150<br>最大连接数 60</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><h2 id="硬件原因"><a href="#硬件原因" class="headerlink" title="硬件原因"></a>硬件原因</h2><p>1、数据库配置低<br>2、连接时间过长</p><h2 id="软件原因"><a href="#软件原因" class="headerlink" title="软件原因"></a>软件原因</h2><p>1、每次执行扫描连接后，没有释放连接<br>2、部分服务存在性能差，执行时间太长</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="硬件方面"><a href="#硬件方面" class="headerlink" title="硬件方面"></a>硬件方面</h2><p>1、开发测试使用，暂无必要升级配置</p><h2 id="软件方面"><a href="#软件方面" class="headerlink" title="软件方面"></a>软件方面</h2><p>1、确保每次通信完毕关闭连接<br>2、重构慢日志性能较差的服务<br><em>3、修改阿里云MySQL参数设置</em></p><p><strong>interactive_timeout</strong></p><blockquote><p>针对<strong>交互式连接</strong>，如MySQL客户端连接数据库是交互式连接<br>interactive_timeout 默认是7200秒，改为10秒</p></blockquote><p><strong><em>wait_timeout</em></strong></p><blockquote><p>针对**<em>非交互式连接**</em>，如JDBC连接数据库是非交互式连接<br>wait_timeout 默认是86400秒，改为60秒</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 常用命令说明</title>
      <link href="2017/07/01/Hexo%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E/"/>
      <url>2017/07/01/Hexo%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h1><p>在IBlog目录下打开 Git Bash ，依次执行以下命令</p><blockquote><p>安装</p></blockquote><pre><code>npm install hexo-cli -g</code></pre><blockquote><p>升级  </p></blockquote><pre><code>npm update hexo -g </code></pre><blockquote><p>初始化</p></blockquote><pre><code>hexo init iBlogcd iBlognpm install</code></pre><h1 id="简写说明"><a href="#简写说明" class="headerlink" title="简写说明"></a>简写说明</h1><blockquote><p>新建</p></blockquote><pre><code>hexo n &lt;title&gt; == hexo new &lt;title&gt;</code></pre><blockquote><p>草稿</p></blockquote><pre><code>hexo new draft &lt;title&gt;</code></pre><blockquote><p>发布</p></blockquote><pre><code>hexo publish &lt;title&gt;</code></pre><blockquote><p>生成</p></blockquote><pre><code>hexo g == hexo generate</code></pre><blockquote><p>部署</p></blockquote><pre><code>hexo d == hexo deploy</code></pre><blockquote><p>启动服务预览</p></blockquote><pre><code>hexo s == hexo server hexo s --debughexo s --debug --draft # 启用草稿预览</code></pre><blockquote><p>版本</p></blockquote><pre><code>hexo v == hexo version</code></pre><h1 id="选项说明"><a href="#选项说明" class="headerlink" title="选项说明"></a>选项说明</h1><blockquote><p>安全模式</p></blockquote><pre><code>hexo --safe # 不会载入插件和脚本。安装新插件遭遇问题时，可以尝试以此重新执行</code></pre><blockquote><p>调试模式</p></blockquote><pre><code>hexo --debug # 显示终端信息并记录到 debug.log</code></pre><blockquote><p>简洁模式</p></blockquote><pre><code>hexo --silent # 隐藏终端信息</code></pre><blockquote><p>显示草稿</p></blockquote><pre><code>hexo --draft # 显示 source/_drafts 的草稿文章</code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Commit</title>
      <link href="2017/06/30/Git%20Commit/"/>
      <url>2017/06/30/Git%20Commit/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Title-Header"><a href="#1-Title-Header" class="headerlink" title="1. Title (Header)"></a>1. Title (Header)</h2><p><strong>（1）type</strong></p><p><code>type</code> 用于说明 commit 的类别，仅允许使用以下规定的标识</p><table><thead><tr><th>序</th><th>名称</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>feature</td><td>增加新功能</td></tr><tr><td>2</td><td>fix</td><td>修复bug</td></tr><tr><td>3</td><td>docs</td><td>增加文档说明</td></tr><tr><td>4</td><td>format</td><td>格式化代码</td></tr><tr><td>5</td><td>refactor</td><td>重构代码</td></tr><tr><td>6</td><td>style</td><td>修改样式</td></tr><tr><td>7</td><td>test</td><td>增加测试</td></tr><tr><td>8</td><td>chore</td><td>构建过程或辅助工具的变动</td></tr></tbody></table><p><strong>（2）scope</strong></p><p><code>scope</code> 用于说明 commit 影响的范围，比如 sns，lang，share。</p><p><code>scope</code> 紧接 <code>type</code> 置于 <code>()</code> 之内。</p><p><strong>（3）subject</strong></p><p><code>subject</code> 是 commit 目的的简短描述，不超过 50 个字符。</p><blockquote><ul><li>以动词开头，使用第一人称现在时，比如change，而不是changed或changes</li></ul></blockquote><ul><li>第一个字母小写</li><li>结尾不加句号（.）</li></ul><hr><p>Title 可参考 #119 <code>refactor(sns): simplify conditional display</code></p><h2 id="2-Body"><a href="#2-Body" class="headerlink" title="2. Body"></a>2. Body</h2><p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p><blockquote><p>More detailed explanatory text, if necessary.  Wrap it to<br>about 72 characters or so.</p></blockquote><blockquote><p>Further paragraphs come after blank lines.</p></blockquote><blockquote><ul><li>Bullet points are okay, too</li></ul></blockquote><ul><li>Use a hanging indent</li></ul><p>有两个注意点：</p><p>（1）使用第一人称现在时，比如使用 <code>change</code> 而不是 <code>changed</code> 或 <code>changes</code>。</p><p>（2）应该说明代码变动的动机，以及与以前行为的对比。</p><h2 id="3-Footer"><a href="#3-Footer" class="headerlink" title="3. Footer"></a>3. Footer</h2><p>Footer 部分只用于两种情况。</p><p><strong>（1）不兼容变动</strong></p><p>如果当前代码与上一个版本不兼容，则 Footer 部分以 <code>BREAKING CHANGE</code> 开头，后面是对变动的描述、以及变动理由和迁移方法。</p><pre><code>BREAKING CHANGE: isolate scope bindings definition has changed.To migrate the code follow the example below:Before:scope: &#123;    myAttr: &#39;attribute&#39;,&#125;After:scope: &#123;    myAttr: &#39;@&#39;,&#125;The removed `inject` wasn&#39;t generally useful for directives so there should be no code using it.</code></pre><p><strong>（2）关闭 Issue</strong></p><p>如果当前 commit 针对某个 issue，那么可以在 Footer 部分关闭这个 issue 。</p><pre><code>Closes #234</code></pre><p>也可以一次关闭多个 issue 。</p><pre><code>Closes #123, #245, #992</code></pre><h2 id="4-Revert"><a href="#4-Revert" class="headerlink" title="4. Revert"></a>4. Revert</h2><p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以 <code>revert:</code> 开头，后面跟着被撤销 Commit 的 Header。</p><pre><code>revert: feat(pencil): add &#39;graphiteWidth&#39; optionThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.</code></pre><p>Body 部分的格式是固定的，必须写成 <code>This reverts commit &lt;hash&gt;.</code>，其中的 <code>hash</code> 是被撤销 commit 的 SHA 标识符。</p><p>如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的 <code>Reverts</code> 小标题下面。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>About</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[<h2 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a>About Me</h2><blockquote><p>一位严重的强迫症患者</p></blockquote><p>对代码规范性异常固执<br>我酷爱编程<br>追求极致、优雅的代码<br>喜欢盘逻辑<br>坐标深圳<br>喜欢爬山<br>喜欢徒步<br>很高兴我们在茫茫网海中相遇<br>希望此刻你一展笑颜</p><h2 id="Follow-Me"><a href="#Follow-Me" class="headerlink" title="Follow Me"></a>Follow Me</h2><p>GitHub：<a href="https://github.com/itjun">iCrazyMage</a></p><p>网易云：<a href="http://music.163.com/#/user/home?id=658124">iCrazyMage</a></p><h2 id="About-Blog"><a href="#About-Blog" class="headerlink" title="About Blog"></a>About Blog</h2><p>1、读写分离</p><blockquote><p>源文件仓库 <a href="https://github.com/itjun/blog">blog</a></p></blockquote><blockquote><p>展示仓库 <a href="https://github.com/itjun/itjun.github.io">itjun.github.io</a> </p></blockquote><p>2、<a href="https://travis-ci.com/itjun/blog">Travis CI</a> 自动构建和发布<br>3、<a href="https://www.aliyun.com/">阿里云</a> 购买域名<br>4、<a href="https://www.cloudflare.com/">CloudFare</a> 域名解析 和 CDN 加速</p><blockquote><p>客户端单向访问是 HTTPS，CloudFare 到 <a href="https://pages.github.com/">GitHub Pages</a> 是HTTP连接</p></blockquote>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>映像</title>
      <link href="gallery/index.html"/>
      <url>gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>links</title>
      <link href="links/index.html"/>
      <url>links/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="target/index.html"/>
      <url>target/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
